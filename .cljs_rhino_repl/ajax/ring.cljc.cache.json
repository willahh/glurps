["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$-status","~$ajax.protocols","~$map->ResponseFormat","~$ajax.interceptors","~$-get-all-headers","^6","~$-body","^6"],"~:excludes",["~#set",[]],"~:name","~$ajax.ring","~:imports",null,"~:requires",["^ ","^8","^8","^6","^6","~$f","~$ajax.formats","^A","^A"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^5","^6","^7","^8","^9","^6","^:","^6"],"~:defs",["^ ","~$make-ring-read",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/willahh/www/projects/clojure/glurps/.cljs_rhino_repl/ajax/ring.cljc","~:line",6,"~:column",7,"~:end-line",6,"~:end-column",21,"~:arglists",["~#list",["~$quote",["^N",[["~$body-read"]]]]]],"^=","~$ajax.ring/make-ring-read","~:variadic",false,"^H",".cljs_rhino_repl/ajax/ring.cljc","^L",21,"~:method-params",["^N",[["^P"]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^J",1,"^I",6,"^K",6,"~:max-fixed-arity",1,"~:fn-var",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$ring-response-format",["^ ","^F",null,"^G",["^ ","^H","/Users/willahh/www/projects/clojure/glurps/.cljs_rhino_repl/ajax/ring.cljc","^I",12,"^J",7,"^K",12,"^L",27,"^M",["^N",["^O",["^N",[[],[["~#cmap",[["^ ","~:keys",["~$read","~$description","~$content-type"]],"~:format"]]]]]]],"~:doc","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.","~:top-fn",["^ ","^R",false,"^V",1,"^S",["^N",[[],[["^Y",[["^ ","^Z",["^[","^10","^11"]],"^12"]]]]],"^M",["^N",[[],[["^Y",[["^ ","^Z",["^[","^10","^11"]],"^12"]]]]],"^U",["^N",[null,null]]]],"^=","~$ajax.ring/ring-response-format","^R",false,"^H",".cljs_rhino_repl/ajax/ring.cljc","^L",27,"^14",["^ ","^R",false,"^V",1,"^S",["^N",[[],[["^Y",[["^ ","^Z",["^[","^10","^11"]],"^12"]]]]],"^M",["^N",[[],[["^Y",[["^ ","^Z",["^[","^10","^11"]],"^12"]]]]],"^U",["^N",[null,null]]],"^S",["^N",[[],[["^Y",[["^ ","^Z",["^[","^10","^11"]],"^12"]]]]],"^T",null,"^U",["^N",[null,null]],"^J",1,"^I",12,"^K",12,"^V",1,"^W",true,"^M",["^N",[[],[["^Y",[["^ ","^Z",["^[","^10","^11"]],"^12"]]]]],"^13","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^<",["~:description","^12","~:read","~:headers","~:status","~:content-type","~:body"]],"~:order",["^1=","^1<","^1?","^12","^1;","^1:","^1>"]],"^13",null]